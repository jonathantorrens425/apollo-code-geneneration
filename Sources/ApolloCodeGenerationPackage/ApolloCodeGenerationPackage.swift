

@main
public struct ApolloCodeGenerationPackage {
    public static func main() {
        print("""
        \n
        Apollo Code Generation Package
        Created by: Jonathan Torrens
                
        Copyright 2023 Jonathan Torrens

        Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:

        The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.

        THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
        
        **************************
        
        Purpose:
            The executable target of this package is designed to be called on
            a directory containing the GraphQL schema and operations required
            for the Apollo Code Generation CLI auto-generate Apollo code models.
        
            The Apollo CLI is pre-configured with the following settings:

            1.  Search directories recursively, starting at the root directory,for
                .graphqls schema files and .graphql operation fiels.


            2.  Create a new Swift Package at the root of the directory that will
                contain the generated Apollo GraphQL code. There must be at least one
                schema and operation of the Apollo Code Generation CLI will fail.
        
            3.  Generated code will be placed in the /Sources subdirectory within the
                root directory.
        
            4.  The generated Apollo schema package will be named "ApolloSchemaPackage"
                by default if no name is specified.
                
        Usage:
            The executable may be called within the target root directory with no arguments.
        
            Three options may be passed from the command line:
            
            -r, --relative-path
        
                Specifies a relativepath from where the executable is called
                to the location of the target directory
        
            -a, --absolute-path
                                
                Specifies a relativepath from where the executable is called
                to the location of the target directory

            -s, --schema-name
                                
                Specifies a the name of the Swift package that will be generated by the
                Apollo CLI; defaults to "ApolloSchemaPackage"

        
            
        
        """)
    }
}
